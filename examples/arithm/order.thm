Import"nats".Import"basic".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%    Greater and lessthan relationship on nat            %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define less : nat -> nat -> prop by
  less z (s N)
; less (s N) (s M) := less N M.

Define greater : nat -> nat -> prop by
  greater (s N) z
; greater (s N) (s M) := greater N M.

Theorem greater_less : forall N M, greater N M -> less M N.
  induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem less_greater : forall N M, less N M -> greater M N.
  induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem simple_less : forall N, nat N -> less N (s N).
  induction on 1. intros. case H1. search.  apply IH to H2. search.

Theorem  succ_greater : forall N, nat N -> greater (s N) N.
  induction on 1. intros. case H1. search.
  apply IH to H2. search.

Theorem  greater_greater :
 forall N M, nat M -> greater N (s M) -> greater N M.
  induction on 1. intros. case H1. case H2. case H3. search.
  case H2. apply IH to H3 H4. search.

Theorem  greater_succ :
 forall N M, nat N -> nat M -> greater N M -> N = (s M) \/ greater N (s M).
  induction on 2. intros.
  case H2. case H3. case H1. case H4. search. search.
  case H3. case H1. apply IH to H6 H4 H5. case H7.
    search. search.

Theorem  less_succ :
 forall N M, nat N -> nat M -> less N M -> (s N) = M \/ less (s N) M.
  induction on 2. intros.
  case H2. case H3. case H1. case H4. search. search.
  case H3. apply IH to H5 H4 H6. case H7.
    search. search.

Theorem greater-succ : forall N M, greater N M -> greater (s N) M.
  induction on 1. intros. case H1. search.
    apply IH to H2. search.

Theorem trichotomy :
 forall N, nat N -> forall M, nat M -> (greater N M \/ N = M \/ less N M).
  induction on 1. intros. case H1.
  case H2. search. search.
  apply IH to H3. apply H4 to H2. case H5.
    apply greater-succ to H6. search.
    apply succ_greater to H2. search.
    apply less_succ to H3 H2 H6.  case H7. search. search.

Theorem trichotomyA :
 forall N M, nat N -> nat M -> less N M -> N = M -> false.
  induction on 3. intros. case H4. case H3. case H1. case H2. apply IH to H6 H7 H5 _.

Theorem trichotomyB :
 forall N M, nat N -> nat M -> less N M -> greater N M -> false.
  induction on 3. intros. case H4. case H3.
    case H1. case H2. case H3. apply IH to H6 H7 H8 H5.

Theorem trichotomyC :
 forall N M, nat N -> nat M -> greater N M -> N = M -> false.
  induction on 3. intros. case H4. case H3. case H1. case H2. apply IH to H6 H7 H5 _.

Theorem simple-three :
 forall N, less N (s (s z)) -> N = z \/ N = (s z) \/ N = (s (s z)).
  intros.  case H1. search. case H2. search. case H3.

Define lesseq : nat -> nat -> prop by
  lesseq z z
; lesseq z (s N)
; lesseq (s N) (s M) := lesseq N M.

Theorem lesseq_less : forall N M, lesseq N M -> N = M \/ less N M.
  induction on 1. intros. case H1. search. search.
  apply IH to H2. case H3. search. search.

Theorem lesseq_eq : forall N, nat N -> lesseq N N.
  induction on 1. intros. case H1.
   search.
   apply IH to H2. search.

Theorem less_lesseq : forall N M, less N M -> lesseq N M.
  induction on 1. intros. case H1.  search. apply IH to H2. search.

Theorem lesseq_trans : forall N M P, 
   lesseq N M -> lesseq M P -> lesseq N P.
  induction on 1. intros. case H1. search. 
  case H2. search.
  case H2. apply IH to H3 H4. search.

Theorem less_trans : forall N M P, 
  less N M -> less M P -> less N P.
  induction on 2. intros. case H2. case H1. case H1. search.
  apply IH to H4 H3. search.

Theorem lesseq_type : forall N M, lesseq N M -> nat N.
  induction on 1. intros. case H1.
   search. search. apply IH to H2. search.

Theorem lesseq_succ : forall N M, lesseq N M -> lesseq N (s M).
  induction on 1. intros. case H1. search. search. apply IH to H2. search.

%%% The following ternary relation denotes a binary function that is associative. 

Define maximum : nat -> nat -> nat -> prop by
  maximum A B A := lesseq B A ;
  maximum A B B := less   A B.

Theorem maximum_total : forall A B, nat A -> nat B -> exists C, nat C /\ maximum A B C.
  intros.  apply trichotomy to H1. apply H3 to H2. case H4.
    witness A. split. search. unfold. apply greater_less to H5. apply less_lesseq to H6. search.
    witness B. split. search. unfold. apply lesseq_eq to H2. search.
    witness B. split. search. unfold. search.

Theorem less_lesseq_not : forall A B, less A B -> lesseq B A -> false.
  induction on 1. intros. case H1.
    case H2.
    case H2. apply IH to H3 H4.

Theorem maximum_determinate : forall A B, nat A -> nat B ->
                              forall C1 C2,  maximum A B C1 -> maximum A B C2 -> C1 = C2.
  intros. case H3. case H4.
    search.
    apply less_lesseq_not to H6 H5.
    case H4. apply less_lesseq_not to H5 H6. search.

Theorem maximum_assoc : forall A B C AB,
	maximum A B AB -> forall BC, maximum B C BC -> forall ABC, maximum AB C ABC -> maximum A BC ABC.
  intros. case H1. case H2. case H3.  apply lesseq_trans to H5 H4. unfold. search.
    apply lesseq_trans to H5 H4.  apply less_lesseq_not to H6 H7.
    case H3.  search. search.  case H2. case H3. search.
    apply less_trans to H4 H6.  apply less_lesseq_not to H6 H5.
    case H3. apply less_lesseq_not to H5 H6.
    apply less_trans to H4 H5. search.
