%% Use well-founded induction to prove the totality of Euclid's GCD algorithm.
%% Well-foundedness is characterized by using the idea of accessibility
%% (e.g. see https://coq.inria.fr/library/Coq.Init.Wf.html).
%%
%% Author: Todd Wilson
%%

%%%% Natural numbers
Specification "nat".

% Ground nats
Define nat : nat -> prop by
  nat z;
  nat (s N) := nat N.

% Less than
Define lt : nat -> nat -> prop by
  lt N (s N);
  lt N1 (s N2) := lt N1 N2.

% The accessible part of the less-than relation
Define lt_acc : nat -> prop by
  lt_acc N := forall M, lt M N -> lt_acc M.


%%%% Every natural number is accessible.

Theorem nat_acc : forall N, nat N -> lt_acc N.
induction on 1. intros. case H1.
  unfold. intros. case H2.
  apply IH to H2. unfold. intros. case H4.
    search.
    case H3. apply H6 to H5. search.


%%%% Some properties of lt

Theorem lt_z : forall N, nat N -> lt z (s N).
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem lt_s : forall N1 N2, lt N1 N2 -> lt (s N1) (s N2).
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.


%%%% Algorithms

% Subtraction
Define sub : nat -> nat -> nat -> prop by
  sub N z N := nat N;
  sub (s N1) (s N2) N3 := sub N1 N2 N3.

% Remainder: mod N M = R
Define mod : nat -> nat -> nat -> prop by
  mod N M N := lt N M;
  mod N M R := exists N', sub N M N' /\ mod N' M R.

% Euclid's Algorithm: gcd N M = D (including gcd z z = z)
Define gcd : nat -> nat -> nat -> prop by
  gcd N z N;
  gcd N (s M) D := exists R, mod N (s M) R /\ gcd (s M) R D.


Import "th65".
  

% Totality of mod N (s M) R, by strong induction on N
Theorem mod_total_strong : forall N M,
  nat N -> lt_acc N -> nat M ->
    exists R, nat R /\ mod N (s M) R.
induction on 2. intros. case H2. apply sub_total to H1 _ with N2 = s M. case H5.
  search.
  apply sub_lt to H3 H7. apply H4 to H8. apply IH to H6 H9 H3. search.