Import "arith".

Define even : nat -> prop by
  even zero ;
  even (succ (succ X)) := even X.

Define odd : nat -> prop by
  odd (succ zero) ;
  odd (succ (succ X)) := odd X.

Theorem even_type : forall X, even X -> nat X.
 induction on 1. intros. case H1. search.  apply IH to H2. search.

Theorem odd_type : forall X, odd X -> nat X.
 induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem even_odd : forall N, even N -> odd (succ N).
  induction on 1. intros pivot. pivot: case pivot.
    search.
    add: apply IH to pivot. search.

Theorem odd_even : forall N, odd N -> even (succ N).
  induction on 1. intros pivot. pivot: case pivot.
    search.
    add: apply IH to pivot. search.

Theorem even_or_odd : forall N, nat N -> even N \/ odd N.
  induction on 1. intros pivot. pivot: case pivot.
    left. search.
    result: apply IH to pivot. c: case result.
      right. apply even_odd to c. search.
      left.  apply odd_even to c. search.

Theorem not_odd_even : forall X, nat X -> (odd X -> false) -> even X.
  intros. apply even_or_odd to H1. case H3. search. apply H2 to H4.

Theorem even_odd_exclusion : forall N, even N -> odd N -> false.
  induction on 1. intros e o. e: case e.
    case o.
    o: case o. apply IH to e o.

Theorem even_decidable : forall N, nat N -> (even N \/ (even N -> false)).
  induction on 1. intros. case H1.
    search.
    case H2.
      right. intros. case H3. apply IH to H3. case H4.
      left.  unfold. search.
      right. intros. case H6. apply H5 to H7.

Theorem plus_twice : forall X Y, nat X -> nat Y -> plus X X Y -> even Y.
 induction on 1. intros. case H1. 
   case H3. search.
   case H3. case H2. apply nat_succ to H4.
   apply plus_comm to H6 H5.  case H8. case H6. apply IH to H4 H10 H9. search.

Theorem odd_plus_even : forall X Y Z, odd X -> even Y -> plus X Y Z -> odd Z.
 induction on 1. intros. case H1.
  case H3. case H4. apply even_odd to H2. search.
  case H3. case H5. apply IH to H4 H2 H6.
           apply odd_even to H7. apply even_odd to H8. search.

Theorem odd_plus_odd : forall X Y Z, odd X -> odd Y -> plus X Y Z -> even Z.
 induction on 1. intros. case H1.
  case H3. case H4. apply odd_even to H2. search.
  case H3. case H5. apply IH to H4 H2 H6.
           apply even_odd to H7. apply odd_even to H8. search.

Theorem times2_even : forall X Y, nat X -> times (succ (succ zero)) X Y -> even Y.
  intros. case H2. case H3. case H5. case H6. apply plus_type2 to H1 H4.
  apply plus_twice to H1 H7 H4. search.

Theorem even_times2 : forall Y, even Y -> exists Y', times (succ (succ zero)) Y' Y.
  induction on 1. intros. case H1. exists zero. search.
  apply IH to H2. exists (succ Y'). unfold. exists (succ Y'). split.
   unfold. exists zero. split. search. search.
   case H3. case H4. case H6. case H7. unfold. 
   assert plus (succ N') N' (succ X). apply even_type to H2. assert nat (succ X).
   apply plus_comm to H10 H8. search.

Theorem odd_times_odd : forall X Y Z, odd X -> odd Y -> times X Y Z -> odd Z.
 induction on 1. intros. case H1.
   case H3. case H4. case H5. search.
   case H3. case H5. apply IH to H4 H2 H7.  apply odd_plus_odd to H9 H2 H8.
      apply odd_type to H2.  apply plus_type2 to H11 H6.
      apply plus_comm to H12 H6. apply odd_plus_even to H2 H10 H13. search.


