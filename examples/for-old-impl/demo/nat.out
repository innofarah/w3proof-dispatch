Kind nat type.

Type zero nat.

Type succ nat -> nat.

Define nat : nat -> prop by 
nat zero;
nat (succ N) := nat N.

Theorem zero-nonzero : 
forall N, nat N -> N = zero \/ (exists M, nat M /\ N = succ M).

induction on 1.
intros tyN.
tyN : case tyN.
left.
search.
disj : apply IH to tyN.
disj : case disj.
right.
exists zero.
search.
right.
exists succ M.
search.
Proof completed
Theorem nat_succ : 
forall N, nat N -> nat (succ N).

induction on 1.
intros tyN.
tyN : case tyN.
search.
add : apply IH to tyN.
search.
Proof completed
Theorem succ_nat : 
forall N, nat (succ N) -> nat N.

intros aux.
case aux.
search.
Proof completed
Theorem decide-eq : 
forall N, nat N -> (forall M, nat M -> (N = M -> false) \/ N = M).

induction on 1.
intros tyN tyM.
tyN : case tyN.
disj : apply zero-nonzero to tyM.
disj : case disj.
right.
search.
left.
intros aux.
case aux.
tyM : case tyM.
left.
intros aux.
case aux.
add : apply IH to tyN.
disj : apply add to tyM.
disj : case disj.
left.
intros aux.
case aux.
backchain disj.
right.
search.
Proof completed
