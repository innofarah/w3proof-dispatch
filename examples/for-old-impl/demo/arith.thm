Import "nat".

%Theorem succ_nat : forall N, nat N.
%skip.

Define plus : nat -> nat -> nat -> prop by
	plus zero N N
;	plus (succ M) N (succ K) := plus M N K.

Theorem plus_type1 : forall N M P, plus N M P -> nat N.
  induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem plus_type2 : forall N M P, nat M -> plus N M P -> nat P.
  induction on 2. intros. case H2. search.
  apply IH to H1 H3. search.

Theorem augend_nat : forall A B C, plus A B C -> nat B -> nat C -> nat A.
induction on 1. intros. case H1.
  search.
  case H3. apply IH to H4 H2 H5. search.

Theorem augend_nat' : forall A B C, plus A B C -> nat C -> nat A.
induction on 1. intros. case H1.
  search.
  case H2. apply IH to H3 H4. search.

Theorem addend_nat : forall A B C, plus A B C -> nat C -> nat B.
induction on 1. intros. case H1.
  search.
  case H2.  apply IH to H3 H4. search.

Theorem plus_nat : forall A B C, plus A B C -> nat A -> nat B -> nat C.
induction on 1. intros. case H1.
  search.
  case H2. apply IH to H4 H5 H3. search.

Theorem plus_zero : forall N, nat N -> plus N zero N.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem plus_succ : forall M N K, plus M N K -> plus M (succ N) (succ K).
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem plus_comm : forall M N K, nat K -> plus M N K -> plus N M K.
induction on 2. intros. case H2.
  apply plus_zero to H1. search.
  case H1. apply IH to H4 H3. apply plus_succ to H5. search.

Theorem plus_det : forall A B C D, plus A B C -> plus A B D -> C = D.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H3 H4. search.

Theorem plus_assoc : forall A B C AB ABC, plus A B AB -> plus AB C ABC -> exists BC, plus B C BC /\ plus A BC ABC.
induction on 1. intros. case H1.
  search.
  case H2. apply IH to H3 H4. search.

Theorem plus_assoc_rl : forall A B C BC ABC, nat ABC ->	plus B C BC -> plus A BC ABC -> exists AB, plus A B AB /\ plus AB C ABC.
intros.
apply plus_comm to H1 H3.
apply addend_nat to H3 H1.
apply plus_comm to H5 H2.
apply plus_assoc to H6 H4.
apply plus_comm to H1 H8.
apply addend_nat to H8 H1.
apply plus_comm to H10 H7.
search.

% And a permutation lemma
Theorem plus_perm4 : forall A B C D AB CD ABCD, nat ABCD -> plus A B AB -> plus C D CD -> plus AB CD ABCD -> exists AC BD, plus A C AC /\ plus B D BD /\ plus AC BD ABCD.
intros.
apply plus_assoc to H2 H4.
apply addend_nat to H6 H1.
apply plus_comm to H7 H5.
apply plus_assoc to H3 H8.
apply addend_nat to H10 H7.
apply plus_comm to H11 H9.
apply plus_assoc_rl to H1 H10 H6.
search.

Theorem plus_total : forall M N, nat M -> exists K, plus M N K.
induction on 1. intros. case H1.
  search.
  apply IH to H2 with N = N. search.

Theorem plus_total' : forall M N, nat M -> nat N -> exists K, nat K /\ plus M N K.
induction on 1. intros. case H1.
  exists N. search.
  apply IH to H3 H2. search.

Theorem plus_swaprl : forall A B C, plus A (succ B) C -> plus (succ A) B C.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem plus_swaplr : forall A B C, plus (succ A) B C -> plus A (succ B) C.
induction on 1. intros. case H1.
  apply plus_succ to H2. search.

Theorem plus_one : forall N, nat N -> plus N (succ zero) (succ N).
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Define times : nat -> nat -> nat -> prop by
	times zero N zero
;	times (succ K) M N := exists N', times K M N' /\ plus N' M N.

Theorem times_nat : forall A B C, times A B C -> nat A -> nat B -> nat C.
induction on 1. intros. case H1.
  search.
  case H2. apply IH to H4 H6 H3. apply plus_nat to H5 H7 H3. search.

Theorem times_zero : forall N, nat N -> times N zero zero.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem times_total' : forall M N, nat M -> nat N -> exists K, nat K /\ times M N K.
induction on 1. intros. case H1.
  search.
  apply IH to H3 H2. apply plus_total' to H4 H2. search.

Theorem times_det : forall A B C D, times A B C -> times A B D -> C = D.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H3 H5. apply plus_det to H4 H6. search.

Theorem times_one : forall N, nat N -> times N (succ zero) N.
induction on 1. intros. case H1.
  search.
  apply IH to H2. apply plus_one to H2. search.

Theorem times_one_simpl : forall A B, times (succ zero) A B -> A = B.
induction on 1. intros. case H1.
  case H2. case H3. search.

Theorem times_succ' : forall M N MN, nat M -> nat N -> nat MN -> times M N MN -> exists K, nat K /\ plus MN M K /\ times M (succ N) K.
induction on 4. intros. case H4.
% Base case
search.
% Inductive step
%% First, derive missing typing judgments and apply induction hypothesis
case H1 (keep).
apply times_nat to H5 H7 H2.
apply IH to H7 H2 H8 H5.
%% Next, manipulate relation trees
%%% Here we provide an anchor for exists from one of two possibilities, addition
apply nat_succ to H2. % <- changed
apply plus_total' to H9 H12.
exists K2.
%%% Next, we transform the second tree into leaf-isomorphic version of the first
apply plus_total' to H3 H1.
apply plus_swaprl to H16.
apply plus_succ to H6.
apply augend_nat to H17 H7 H15.
apply plus_comm to H19 H18.
apply plus_assoc to H20 H17.
apply plus_comm to H15 H22.
%%% Finally, we identify the nodes and finish
apply plus_det to H10 H21.
apply plus_det to H14 H23.
search.

% A consequence
Theorem times_incr : forall A B AB ABB, nat ABB -> times A B AB -> plus AB B ABB -> times (succ A) B ABB.
search.

% In reverse
Theorem times_succl : forall A B C, nat A -> nat B -> nat C -> times A B C -> exists D, nat D /\ times (succ A) B D /\ plus C B D.
induction on 4.
intros.
case H4.
% Base case
search.
% Induction step
case H1.
apply augend_nat to H6 H2 H3.
apply IH to H7 H2 H8 H5.
apply plus_det to H6 H11.
apply plus_total' to H9 H2.
exists K1.
search.

Theorem times_comm' : forall M N K, nat M -> nat N -> nat K -> times M N K -> times N M K.
induction on 4.
intros.
% Base case
case H4.
apply times_zero to H2.
search.
% Inductive step
case H1.
%% Derive missing typing judgment, then apply induction
apply augend_nat to H6 H2 H3.
apply IH to H7 H2 H8 H5.
%% From this point, manipulate expressions to reach the goal and finish
apply plus_comm to H3 H6.
apply times_succ' to H2 H7 H8 H9.
apply plus_det to H6 H12.
search.

Theorem distribute : forall X Y Z YpZ T, nat X -> nat Y -> nat Z -> nat YpZ -> nat T -> plus Y Z YpZ -> times X YpZ T ->
	exists XtY XtZ,	nat XtY /\ nat XtZ /\ times X Y XtY /\ times X Z XtZ /\ plus XtY XtZ T.
induction on 1.
intros.
case H1.
% Base case
case H7.
search.
% Induction step
case H7.
apply augend_nat to H10 H4 H5.
apply IH to H8 H2 H3 H4 H11 H6 H9.
apply plus_perm4 to H5 H16 H6 H10.
apply augend_nat' to H19 H5.
apply times_incr to H20 H14 H17.
apply addend_nat to H19 H5.
apply times_incr to H22 H15 H18.
search.

Theorem undistr_times_plus : forall X Y Z XtY XtZ XtYpXtZ, nat X -> nat Y -> nat Z -> nat XtY -> nat XtZ -> nat XtYpXtZ ->
	times X Y XtY -> times X Z XtZ -> plus XtY XtZ XtYpXtZ ->
	exists YpZ XtYpZ, nat YpZ /\ nat XtYpZ /\ times Y Z YpZ /\ times X YpZ XtYpZ.
induction on 1.
intros.
case H1.
% Base case
case H7.
case H8.
case H9.
apply times_total' to H2 H3.
search.
% Induction step
case H7.
case H8.
apply augend_nat to H12 H2 H4.
apply augend_nat to H14 H3 H5.
apply plus_total' to H15 H16.
apply IH to H10 H2 H3 H15 H16 H17 H11 H13 H18.
apply nat_succ to H10.
apply times_total' to H23 H19.
search.

Theorem times_assoc' : forall A B C AB ABC, nat A -> nat B -> nat C -> nat AB -> nat ABC ->
	times A B AB -> times AB C ABC -> exists BC, times B C BC /\ times A BC ABC.
induction on 6.
intros.
case H6.
% Base case
case H7.
apply times_total' to H2 H3.
search.
% Induction step
case H1.
apply times_comm' to H4 H3 H5 H7.
apply augend_nat to H9 H2 H4.
apply distribute to H3 H12 H2 H4 H5 H9 H11.
apply times_comm' to H3 H12 H13 H15.
apply IH to H10 H2 H3 H12 H13 H8 H18.
apply times_nat to H19 H2 H3.
apply times_comm' to H2 H3 H21 H19.
apply times_det to H16 H22.
search.

